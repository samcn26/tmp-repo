openapi: 3.0.0
info:
  description: This is a KS-System Edu Project API created by samcn26@gmail.com
  version: 0.0.1
  title: KS-System Edu API
  # put the contact info for your development or API team
  contact:
    email: samcn26@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: "localhost:3000"
    description: "/api"

# Apply the security globally to all operations
security:
  - bearerAuth: []

# tags are used for organizing operations
tags:
  - name: user
    description: Operations about user
  - name: project
    description: Operations about project
  - name: notification
    description: Operations about notification
  - name: history
    description: Operations about project modification history

paths:
  /user/login:
    post:
      tags:
        - "user"
      summary: "Logs user into the system"
      operationId: loginUser
      description: ""
      requestBody:
        description: User for login
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The user name for login
                  type: string
                password:
                  description: The password for login
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400:
          description: Invalid password
        404:
          description: User not found
  /user:
    get:
      tags:
        - user
      summary: Find all users
      operationId: getUserList
      responses:
        200:
          description: successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Register user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid email               
  /user/{userId}:
    put:
      tags:
        - user
      summary: Update user password or user info
      description: Only admin user can update user name or operate the user form in the system
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        required: true
        description: ID for user
        schema:
          type: integer
      - name: type
        in: query
        description: |
          Type 'pwd' means update password only,
          'info' means update email, name and only admin can modify email.
          'all' no limits
        required: true
        schema:
          type: string
          enum: [pwd,info,all]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        400:
          description: Invalid input
          content: {}
        404:
          description: User not found
          content: {} 
    delete:
      tags:
      - user
      summary: Delete user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/deleteUsers:
    delete:
      tags:
      - user
      summary: Delete users in bulk
      operationId: batchDeleteUser
      parameters:
      - in: query
        name: userIds
        schema:
          type: array
          items:
            type: string
      responses:
        400:
          description: Invalid ID supplied
          content: {}
  
  /project:
    post:
      tags:
      - project
      summary: Add a new project
      operationId: addProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'              
        400:
          description: Invalid input
    get:
      tags:
      - project
      summary: Find all projects
      operationId: getProjectList
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
  /project/{projectId}:
    put:
      tags:
        - project
      summary: Update project
      operationId: updateProject
      parameters:
      - name: projectId
        in: path
        required: true
        description: ID for project
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        400:
          description: Invalid input
          content: {}
        404:
          description: Project not found
          content: {}             
    delete:
      tags:
      - project
      summary: Delete project
      operationId: deleteProject
      parameters:
      - name: projectId
        in: path
        description: ID of the project
        required: true
        schema:
          type: integer
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: User not found
          content: {}              
  /project/deleteProjects:
      delete:
        tags:
        - project
        summary: Delete projects in bulk
        operationId: batchDeleteProject
        parameters:
          - in: query
            name: projectIds
            schema:
              type: array
              items:
                type: string
        responses:
          400:
            description: Invalid ID supplied
            content: {}
  /history:
    get:
      tags:
      - history
      summary: Get modification history with specified project code
      operationId: getHistory
      parameters:
      - name: project_code 
        in: query
        required: true
        description: Project code
        schema:
          type: string 
      - name: sortByTime 
        in: query
        required: true
        description: Default is descending
        schema:
          type: string
          enum: [asc,desc]
          default: desc
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/History'
        404:
          description: Project not found
          content: {}
    post:
      tags:
      - history
      summary: Add a new modification history
      operationId: addHistory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/History'
      responses:
        200:
          description: successful operation
  /notification:
    get:
      tags:
      - notification
      summary: Get notification by user ID
      description: Descending by 'action_time'
      operationId: getNotification
      parameters:
      - name: user_id
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notification/{receiver_id}:            
    put:
      tags:
      - notification
      summary: Update notification
      operationId: updateNotification
      parameters:
      - name: receiver_id
        in: path
        required: true
        schema: 
          type: string
      responses:
        200:
          description: successful operation
              
components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
          example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    Approval_Status:
      type: string
      description: Current process approval status
      enum:
        - TODO
        - NG
        - OK
    Action_Type:
      type: string
      description: |
        Specified action for dealing with DB,
        'CHANGE' meangs change assignee
      enum:
        - CREATE
        - UPDARE
        - DELETE
        - CHANGE
    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          description: This email connect with Avatar
          type: string
        password:
          type: string
        admin:
          type: boolean
          default: false
        note:
          type: string
    Project:
      type: object
      required:
        - project_code
      properties:
        id:
          type: integer
        user_id:
          $ref: "#/components/schemas/User"
        project_code:
          type: string
        design_start:
          type: string
          format: date
        design_end:
          type: string
          format: date
        design_perc:
          type: string
          format: double
        design_approval:
          $ref: "#/components/schemas/Approval_Status"
        coding_start:
          type: string
          format: date
        coding_end:
          type: string
          format: date
        coding_perc:
          type: string
          format: double
        coding_approval:
          $ref: "#/components/schemas/Approval_Status"
        testing_start:
          type: string
          format: date
        testing_end:
          type: string
          format: date
        testing_perc:
          type: string
          format: double
        testing_approval:
          $ref: "#/components/schemas/Approval_Status"
        release:
          type: string
          format: date
    History:
      description: Action history
      type: object
      required:
        - project_code
        - action_type
        - action_time
      properties:
        id:
          type: integer
        user_id:
          $ref: "#/components/schemas/User"
        project_code:
          type: string
        action_type:
          $ref: "#/components/schemas/Action_Type"
        action_time:
          type: string
          format: date-time
        assignee_pre:
          $ref: "#/components/schemas/User"
        assignee_cur:
          $ref: "#/components/schemas/User"
        design_prev_perc:
          type: string
          format: double
        design_cur_perc:
          type: string
          format: double
        coding_prev_perc:
          type: string
          format: double
        coding_cur_perc:
          type: string
          format: double
        testing_prev_perc:
          type: string
          format: double
        testing_cur_perc:
          type: string
          format: double
        receivers:
          type: array
          items:
            $ref: '#/components/schemas/Receiver'
    Receiver:
      type: object
      properties:
        id:
          type: integer
        read_status:
          type: boolean
          default: false
        delete_status:
          type: boolean
          default: false
    Notification:
      allOf:
      - $ref: '#/components/schemas/Receiver'
      - type: object
        properties:
          project_code:
            type: string
          action_type:
            $ref: "#/components/schemas/Action_Type"
          action_time:
            type: string
            format: date-time          

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      description: Return full user infor encrypted as token after successful login
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
